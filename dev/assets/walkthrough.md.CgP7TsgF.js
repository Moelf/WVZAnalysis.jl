import{_ as s,c as i,o as a,a6 as t}from"./chunks/framework.DYUz2Ezc.js";const g=JSON.parse('{"title":"Introduction and pre-requisite","description":"","frontmatter":{},"headers":[],"relativePath":"walkthrough.md","filePath":"walkthrough.md","lastUpdated":null}'),e={name:"walkthrough.md"},n=t(`<h1 id="Introduction-and-pre-requisite" tabindex="-1">Introduction and pre-requisite <a class="header-anchor" href="#Introduction-and-pre-requisite" aria-label="Permalink to &quot;Introduction and pre-requisite {#Introduction-and-pre-requisite}&quot;">​</a></h1><p>The entire WVZAnalysis (4 lepton channel) can be break into rought 5 parts:</p><ol><li><p>Make flat <code>.arrow</code> files from &quot;nominal&quot; samples</p></li><li><p>Use <code>.arrow</code> files to train XGBoost models</p></li><li><p>Use XGBoost models to produce histograms that include all systematics variations (saved temporarily via <code>Serialization</code>. This step involves HTCondor (or maybe other job system)</p></li><li><p>Convert histograms to <code>.root</code> files via Python <code>uproot</code></p></li><li><p>Run fit with TRex-fitter (outside of this walkthrough)</p></li></ol><p>This Julia package is almost self-contained, certainly all of Julia parts should be exactly reproducible. But we will rely on <code>LCG</code> release for the three Python pkg (<code>uproot, hist, numpy</code>), and because Python importing rules, at step 4 you need to start Julia with an environment variable, as noted below.</p><h2 id="Before-you-start" tabindex="-1">Before you start <a class="header-anchor" href="#Before-you-start" aria-label="Permalink to &quot;Before you start {#Before-you-start}&quot;">​</a></h2><p>We will assume you have access to LCG release via CVMFS, and use the <code>dev4</code> branch which contains Julia 1.10+.</p><p>You should also clone this repository and checkout the <code>refactor_Julia_v1p9</code> branch (or if this branch is merged, just whatever release tag you need):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Moelf/WVZAnalysis.jl/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WVZAnalysis.jl</span></span></code></pre></div><p>Finally, instantiate the exact Julia versions we used for this analysis:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># this is generally the command we need to use to start a Julia REPL</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \`.\` here is the root directory of this git repo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JULIA_CPU_TARGET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;generic;znver2,clone_all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JULIA_CONDAPKG_BACKEND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Null</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]instantiate # when you press \`]\` the prompt should switch to \`(WVZAnalysis) pkg&gt;\`</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>If you want to use LCG for all the Python stuff, remember to add this <code>JULIA_CONDAPKG_BACKEND=Null</code> which tells <code>PythonCall.jl</code> to not manage our Python environment!</p></div><h1 id="Step-1" tabindex="-1">Step 1 <a class="header-anchor" href="#Step-1" aria-label="Permalink to &quot;Step 1 {#Step-1}&quot;">​</a></h1><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WVZAnalysis</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ALL_TAGS) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    arrow_main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tag; output_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/data/jiling/WVZ/v2.4.2-2024_06_06_arrow/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Remember to change <code>output_dir</code> to somewhere you have write access.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This assumes <code>WVZAnalysis.MINITREE_DIR</code> points to the data dir, on AF UChicago, all the minitree files are copied to <code>/data/jiling/WVZ/v2.4.2</code>, if you need to change this, run <code>WVZAnalysis.set_minitree_dir</code> and restart Julia session. This setting presists across Julia sessions via <code>Preference.jl</code>, the values are stored in the <code>LocalPreferences.toml</code> file.</p></div><h1 id="Step-2" tabindex="-1">Step 2 <a class="header-anchor" href="#Step-2" aria-label="Permalink to &quot;Step 2 {#Step-2}&quot;">​</a></h1><p>Now that the arrow files are in place, we can train XGBoost, you really want to use GPU for this training, in the walkthrough, we will use AF UChicago&#39;s gpu node.</p><p>First we start an interactive condor job:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">condor_submit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -interactive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config/interactive.sub</span></span></code></pre></div><p>Then once you&#39;re dropped onto remote worker, you need to re setup environment:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>source /cvmfs/sft.cern.ch/lcg/views/dev4/latest/x86_64-centos7-gcc11-opt/setup.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cd &lt;where you cloned WVZAnalysis.jl&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LD_LIBRARY_PATH=&#39;&#39; julia --project=./WVZXGBoostExt</span></span></code></pre></div><p>Then, we need to instantiate on this node because hardware has changed (we have a GPU now):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>]instantiate</span></span></code></pre></div><p>Finally, we can run our XGBoost training (remember to replace the paths):</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WVZXGBoostExt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df_all </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WVZXGBoostExt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load_all_arrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/data/jiling/WVZ/v2.4.2-2024_06_06_arrow/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WVZXGBoostExt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">train_and_log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df_all; output_dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/data/jiling/WVZ/v2.4.2.-2024_06_12_hists/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tree_method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpu_hist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The <code>+queue=&quot;short&quot;</code> and <code>request_gpus=1</code> (in <code>interactive.sub</code>) are used by AF UChicago.</p></div><h1 id="Step-3" tabindex="-1">Step 3 <a class="header-anchor" href="#Step-3" aria-label="Permalink to &quot;Step 3 {#Step-3}&quot;">​</a></h1><p>In this step, we use the cluster (HTCondor in this case) to run through all systematic variations:</p><p>But first, you need to point our package to the new location that stores the XGBoost models:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JULIA_CPU_TARGET=&quot;generic;znver2,clone_all&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JULIA_CONDAPKG_BACKEND=Null</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;using WVZAnalysis; WVZAnalysis.set_bdt_model_dir(&quot;/data/jiling/WVZ/v2.3-2023_06_15_hists/&quot;)&#39;</span></span></code></pre></div><p>Then start a new Julia session:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ JULIA_CPU_TARGET=&quot;generic;znver2,clone_all&quot; JULIA_CONDAPKG_BACKEND=Null julia --project=.</span></span></code></pre></div><p>Then, we can schedule all the histogram making jobs:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClusterManagers, Distributed, WVZAnalysis</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addprocs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTCManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); extrajdl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+queue=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">short</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;request_memory = 4GB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], exeflags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`--project=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">active_project())</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@everywhere</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WVZAnalysis</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>We now request 80 jobs, and we no longer need gpu requirement since we&#39;re not training. The <code>init.jl</code> fixes an issue where remote Julia workers sometimes can&#39;t find the correct network interface.</p></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([ALL_TAGS; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    hist_main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tag; output_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/data/jiling/WVZ/v2.3-2023_06_15_hists/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>You want to exit this Julia session after you&#39;re finished, which will also kill the condor jobs (unless you want to manually run <code>rmprocs()</code>)</p><h1 id="Step-4" tabindex="-1">Step 4 <a class="header-anchor" href="#Step-4" aria-label="Permalink to &quot;Step 4 {#Step-4}&quot;">​</a></h1><p>In this last step, we will convert the output from last step into <code>.root</code> files, start a new Julia session if you exit the last one:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JULIA_CPU_TARGET=&quot;generic;znver2,clone_all&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> JULIA_CONDAPKG_BACKEND=Null</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> julia</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --project=.</span></span></code></pre></div><p>and simply use the little Python &quot;extention&quot; package we wrote:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WVZPythonExt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> serial_to_root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/data/jiling/WVZ/v2.3-2023_06_15_hists/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">readdir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/data/jiling/WVZ/v2.3-2023_06_12_hists/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element Vector{String}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Data.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Others.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Signal.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;VBS.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;VH.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;WZ.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ZZ.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Zgamma.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Zjets.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tWZ.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tZ.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ttZ.root&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ttbar.root&quot;</span></span></code></pre></div>`,42),l=[n];function h(p,o,k,r,d,c){return a(),i("div",null,l)}const E=s(e,[["render",h]]);export{g as __pageData,E as default};
