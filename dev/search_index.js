var documenterSearchIndex = {"docs":
[{"location":"internalapis/#Internal","page":"-","title":"Internal","text":"","category":"section"},{"location":"internalapis/","page":"-","title":"-","text":"Modules = [WVAZnalysis]","category":"page"},{"location":"#The-Big-Picture","page":"Introduction","title":"The Big Picture","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"like any Julia package, the source files are under /src\nmeta data files such as tag -> DSID mapping are under /config\nthe main looper is called main_looper() and all the real actions are in there\nthe atomic unit of runnable task is called AnalysisTask","category":"page"},{"location":"#A-typical-workflow","page":"Introduction","title":"A typical workflow","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Say we're trying to produce BDT score histogram for process ZZ:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"call prep_tasks(\"ZZ\") (this returns a vector of AnalysisTasks)\nrun main_looper over each of the tasks, you can use threading, or distributed parallelism.\neach main_looper would would return a dictionary of histograms\nmerge all the result (reduce(mergewith(+), results_from_3))\nprofit","category":"page"},{"location":"#Public-ish-APIs","page":"Introduction","title":"Public-ish APIs","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"These are the types and functions all a user would need,  in order to do pretty much anything.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The packages that are good to be familiar with: ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"UnROOT.jl\nFHist.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"These functions/types and the direct callees are more documented than the rest of the library:","category":"page"},{"location":"#Analysis-and-data-dumping","page":"Introduction","title":"Analysis and data dumping","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"AnalysisTask\nprep_tasks\nmain_looper(t::AnalysisTask)\narrow_making\nhist_root\nhist_root_pmap","category":"page"},{"location":"#WVZAnalysis.AnalysisTask","page":"Introduction","title":"WVZAnalysis.AnalysisTask","text":"struct AnalysisTask\n    path::String\n    sumWeight::Float64\n    isdata::Bool = false\n    NN_hist::Bool = true\n    arrow_making::Bool = false\n    sfsys::Bool = false\n    shape_variation::String = \"NOMINAL\"\n    controlregion::Symbol = :none\nend\n\nFully define a task to be run on an executor, by calling main_looper(task::AnalysisTask); see also main_looper.\n\nYou most likely don't need to construct it manually, see prep_tasks:\n\nExample\n\njulia> prep_tasks(\"Signal\") |> first\npath=\"/data/jiling/WVZ/v2.3/user.jiling.WVZ_v2.3sf.363507.e6379_s3126_r10201_p4434_ANALYSIS.root/user.jiling.29896106._000001.ANALYSIS.root\"\nsumWeight=13812.79638671875\nisdata=false\nNN_hist=true\narrow_making=false\nsfsys=false\nshape_variation=\"NOMINAL\"\ncontrolregion=:none\n\njulia> prep_tasks(\"Signal\"; arrow_making=true) |> first\nERROR: can't do produce arrow and NN histograms at the same time\nStacktrace:\n...\n..\n\njulia> prep_tasks(\"Signal\"; arrow_making=true, NN_hist=false) |> first\npath=\"/data/jiling/WVZ/v2.3/user.jiling.WVZ_v2.3sf.363507.e6379_s3126_r10201_p4434_ANALYSIS.root/user.jiling.29896106._000001.ANALYSIS.root\"\nsumWeight=13812.79638671875\nisdata=false\nNN_hist=false\narrow_making=true\nsfsys=false\nshape_variation=\"NOMINAL\"\ncontrolregion=:none\n\n\n\n\n\n","category":"type"},{"location":"#WVZAnalysis.prep_tasks","page":"Introduction","title":"WVZAnalysis.prep_tasks","text":"prep_tasks(tag; shape_variation=\"NOMINAL\", scouting=false, kw...)\n\nFor construction a collection of AnalysisTasks given tag and job options, check out [@AnalysisTask].\n\nAll posible tags can be found in config/file_list.json, there's also a convinient variable WVZAnalysis.ALL_TAGS that keeps track of all processes in an exclusive mannar:\n\nExample\n\njulia> WVZAnalysis.ALL_TAGS\n(\"Signal\", \"ZZ\", \"Zjets\", \"Zgamma\", \"ttbar\", \"WZ\", \"tZ\", \"ttZ\", \"tWZ\", \"VBS\", \"VH\", \"Others\")\n\njulia> all_nominal_tasks = mapreduce(prep_tasks, vcat, WVZAnalysis.ALL_TAGS);\n\njulia> length(all_nominal_tasks)\n768\n\n\n\n\n\n","category":"function"},{"location":"#WVZAnalysis.main_looper-Tuple{AnalysisTask}","page":"Introduction","title":"WVZAnalysis.main_looper","text":"main_looper(task::AnalysisTask)\n\nThe main entry point for running the main looper for a given task, it's done in steps:\n\ndestruct all the options from the task (see AnalysisTask):\n\n    (; path, sumWeight, arrow_making, NN_hist, isdata, \n     shape_variation, controlregion, sfsys) = task\n\ndetermine what output dict to prepare.\ncall the lower level main_looper (which has all arguments explicitly laied out)\n\nThis function also serves a function barrier for performance reason, because we have so many different behaviors in the same loop function.\n\n\n\n\n\n","category":"method"},{"location":"#WVZAnalysis.arrow_making","page":"Introduction","title":"WVZAnalysis.arrow_making","text":"arrow_making(tasks)\n\nTake a collection of tasks, run them via map and mergewith(append!). Returns a dict of vectors representing the datas after filtering.\n\n\n\n\n\n","category":"function"},{"location":"#WVZAnalysis.hist_root","page":"Introduction","title":"WVZAnalysis.hist_root","text":"hist_root(tag; output_dir, kw...)\n\nreturn a dictionary of all systematics histograms for a given tag, the output_dir is used to store Julia Serializatio files as a backup measure, and for later conversion to .root histograms via PythonCall.jl + uproot.\n\n\n\n\n\n","category":"function"},{"location":"#WVZAnalysis.hist_root_pmap","page":"Introduction","title":"WVZAnalysis.hist_root_pmap","text":"hist_root_pmap(tag; output_dir, kw...)\n\nSimilar to the one without pmap, except uses pmap for everything. Checkout ClusterManager.jl and be sure to have a handful of workers before running this.\n\n\n\n\n\n","category":"function"},{"location":"#Result-reporting","page":"Introduction","title":"Result reporting","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"significance_table\nprint_sigtable","category":"page"},{"location":"#WVZAnalysis.significance_table","page":"Introduction","title":"WVZAnalysis.significance_table","text":"significance_table(; recreate=false)\nsignificance_table(significance_matrix(); recreate=false)\n\nExamples\n\njulia> M = significance_table()\n15×4 Matrix{Any}:\n \"Signal\"         11.509±0.068     9.18±0.1     10.14±0.14\n \"ZZ\"             1709.1±5.5      389.2±2.3      19.1±0.44\n \"Zjets\"           -0.02±0.13       1.9±1.1       5.9±5.5\n \"Zgamma\"            0.0±0.0        0.0±0.0       0.3±0.29\n \"ttbar\"             0.0±0.0       0.63±0.18     0.28±0.1\n \"WZ\"              0.362±0.096     1.72±0.22     2.13±0.28\n \"tZ\"                0.0±0.0      0.059±0.025    0.06±0.025\n \"ttZ\"             1.227±0.08      4.66±0.16     5.68±0.17\n \"tWZ\"              0.58±0.11      2.15±0.23     2.51±0.24\n \"VBS\"            11.682±0.092    5.239±0.073   0.182±0.011\n \"VH\"               1.29±0.71       5.6±1.4       5.4±1.2\n \"Others\"         0.0584±0.0089    0.38±0.13    0.549±0.082\n \"Bkg Tot.\"       1724.3±5.6      411.5±2.9      42.1±5.7\n \"Significance\"   0.2768±0.0017  0.4508±0.0053  1.505±0.096\n \"Combined Sig.\"     NaN±0.0      1.595±0.091     NaN±0.0\n\n\n\n\n\n\n","category":"function"},{"location":"#WVZAnalysis.print_sigtable","page":"Introduction","title":"WVZAnalysis.print_sigtable","text":"print_sigtable(full_table)\n\nTakes the output of significance_table and pretty print it:\n\nExample\n\njulia> M = significance_table(; recreate=true);\n\njulia> print_sigtable(M)\n\n┌───────────────┬────────────────┬───────────────┬──────────────┐\n│               │     SF-inZ     │    SF-noZ     │      DF      │\n├───────────────┼────────────────┼───────────────┼──────────────┤\n│    Signal     │  11.73 ± 0.07  │  9.31 ± 0.1   │ 10.73 ± 0.14 │\n│      ZZ       │ 1775.6 ± 5.89  │ 469.06 ± 2.44 │ 19.78 ± 0.45 │\n│     Zjets     │  -0.02 ± 0.13  │  2.6 ± 2.22   │ 6.47 ± 5.51  │\n│    Zgamma     │   0.0 ± 0.0    │   0.0 ± 0.0   │  0.3 ± 0.29  │\n│     ttbar     │   0.0 ± 0.0    │  0.63 ± 0.18  │  0.28 ± 0.1  │\n│      WZ       │   0.36 ± 0.1   │  1.79 ± 0.23  │ 2.24 ± 0.29  │\n│      tZ       │  0.01 ± 0.01   │  0.07 ± 0.03  │ 0.06 ± 0.02  │\n│      ttZ      │  1.24 ± 0.08   │  4.71 ± 0.16  │ 5.74 ± 0.18  │\n│      tWZ      │  0.57 ± 0.11   │  2.16 ± 0.23  │  2.5 ± 0.24  │\n│      VBS      │  11.71 ± 0.09  │  6.4 ± 0.08   │ 0.18 ± 0.01  │\n│      VH       │  1.29 ± 0.71   │  5.76 ± 1.4   │ 5.77 ± 1.29  │\n│    Others     │  0.06 ± 0.01   │  0.4 ± 0.13   │ 0.56 ± 0.08  │\n├───────────────┼────────────────┼───────────────┼──────────────┤\n│   Bkg Tot.    │ 1790.82 ± 5.94 │ 493.58 ± 3.61 │ 43.89 ± 5.7  │\n├───────────────┼────────────────┼───────────────┼──────────────┤\n│ Significance  │   0.28 ± 0.0   │  0.42 ± 0.0   │  1.56 ± 0.1  │\n│ Combined Sig. │   NaN ± 0.0    │  1.64 ± 0.09  │  NaN ± 0.0   │\n└───────────────┴────────────────┴───────────────┴──────────────┘\n\n\n\n\n\n","category":"function"}]
}
